{"version":3,"sources":["components/TimelineItem.tsx","components/Timeline.tsx","components/Header.tsx","api/dataApi.ts","redux/dataReducer.ts","redux/types.ts","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["Item","props","clsRight","header","title","handleClick","e","setShow","show","className","onClick","text","TimelineItem","useState","list","map","field","i","key","Timeline","timelineData","useSelector","state","length","Header","aria-hidden","to","dataApi","fetchData","Promise","res","rej","setTimeout","initialState","dataReducer","action","type","App","dispatch","useDispatch","useEffect","a","data","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.452614ab.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {IField, IList} from \"../redux/types\";\r\n\r\ninterface IItem {\r\n    title: string\r\n    text?: string\r\n    header: boolean\r\n    show: boolean\r\n    setShow?: (show: boolean) => void\r\n}\r\n\r\nconst Item = (props: IItem) => {\r\n    const clsRight = props.header ? \"timeline-content\" : \"timeline-content timeline-content__right\";\r\n    const title = props.header ? \"timeline-content title\" : \"timeline-content\";\r\n\r\n    const handleClick: React.MouseEventHandler<\r\n        HTMLButtonElement | HTMLAnchorElement\r\n        > = e => {\r\n        if (props.setShow) props.setShow(!props.show);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.header && !props.show &&\r\n                <li className=\"timeline-item\">\r\n                    <div className={title}>{props.title}</div>\r\n                    <div className=\"timeline-content__center\">\r\n                        {props.header && <span className=\"timeline-content__circle\" onClick={handleClick}/>}\r\n                        {props.show && <span className={\"timeline-content__line\"}/>}\r\n                    </div>\r\n                    <div className={clsRight}>{props.text}</div>\r\n                </li>\r\n            }\r\n            {\r\n                props.show &&\r\n                <li className=\"timeline-item\">\r\n                    <div className={title}>{props.title}</div>\r\n                    <div className=\"timeline-content__center\">\r\n                        {props.header && <span className=\"timeline-content__circle\" onClick={handleClick}/>}\r\n                        {props.show && <span className={\"timeline-content__line\"}/>}\r\n                    </div>\r\n                    <div className={clsRight}>{props.text}</div>\r\n                </li>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nconst TimelineItem = (props: IList) => {\r\n    const [show, setShow] = useState<boolean>(false);\r\n\r\n    return (\r\n        <ul className=\"timeline\">\r\n            {\r\n                props.list.map((field: IField, i: number) => {\r\n                     if(field.header) return <Item {...field} setShow={setShow} show={show} key={i}/>\r\n                     else return <Item {...field}  show={show} key={i}/>\r\n               })\r\n            }\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default TimelineItem;\r\n\r\n","import React from \"react\";\r\nimport {RootState} from \"../redux/store\";\r\nimport TimelineItem from \"./TimelineItem\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst Timeline = () => {\r\n    const timelineData = useSelector((state: RootState) => state.timelineData.timelineData);\r\n\r\n    return timelineData.length > 0\r\n        ? (\r\n            <div className=\"timeline-container\">\r\n                <div className=\"timeline-item\">\r\n                    <div className=\"timeline-content timeline-content__title timeline-content__left\">Свойство</div>\r\n\r\n                    <div className=\"timeline-content timeline-content__title\">Значение</div>\r\n                </div>\r\n                {\r\n                    timelineData.map((field, i) => {\r\n                        return <TimelineItem {...field} key={i}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n        : <p>Запрос.....</p>\r\n};\r\n\r\nexport default Timeline;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header-logo\">\r\n                <i className=\"fa fa-desktop\" aria-hidden=\"true\"></i>\r\n            </div>\r\n            <nav className=\"header-nav\">\r\n                <Link className=\"nav-item\" to={\"#\"}>Планирование численности</Link>\r\n                <span>/</span>\r\n                <Link className=\"nav-item\" to={\"#\"}>Мастер 2020</Link>\r\n                <span>/</span>\r\n                <Link className=\"nav-item\" to={\"#\"}>Таблица</Link>\r\n                <span>/</span>\r\n                <Link className=\"nav-item\" to={\"#\"}>Организационный дизайн</Link>\r\n                <span>/</span>\r\n                <Link className=\"nav-item\" to={\"#\"}>Позиция</Link>\r\n                <span>/</span>\r\n                <Link className=\"nav-item\" to={\"#\"}>Мои прямые подчиненные</Link>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","export const timelineData = [\r\n    {\r\n        \"list\": [\r\n            {\r\n                \"title\": 'Общая информация',\r\n                \"header\": true\r\n            },\r\n            {\r\n                \"title\": \"Документ\",\r\n                \"text\": \"Профиль требования к должности\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Должность\",\r\n                \"text\": \"Инженер\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Функциональное управление\",\r\n                \"text\": \"Логистика\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Специализация\",\r\n                \"text\": \"Обслуживание и ремонт механического, энергитического и электрооборудования\",\r\n                \"header\": false\r\n            }\r\n        ],\r\n    },\r\n\r\n    {\r\n        \"list\": [\r\n            {\r\n                \"title\": 'Образование',\r\n                \"header\": true\r\n            },\r\n            {\r\n                \"title\": \"Степень\",\r\n                \"text\": \"Высшее/Среднее высшее\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Специализация\",\r\n                \"text\": \"Инженерно-техническая\",\r\n                \"header\": false\r\n            }\r\n        ],\r\n    },\r\n\r\n    {\r\n        \"list\": [\r\n            {\r\n                \"title\": 'Корпоротивные компетенции',\r\n                \"header\": true\r\n            },\r\n            {\r\n                \"title\": \"Сотрудничество\",\r\n                \"text\": \"1\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Коммуникации и убеждения\",\r\n                \"text\": \"2\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Достижение результата\",\r\n                \"text\": \"3\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Системное мышление\",\r\n                \"text\": \"3\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": 'Культура безопасности',\r\n                \"text\": \"2\",\r\n                \"header\": false\r\n            },\r\n            {\r\n                \"title\": \"Сотрудничество\",\r\n                \"text\": \"1\",\r\n                \"header\": false\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nexport type ITimelineData = typeof timelineData\r\n\r\nconst dataApi = {\r\n    fetchData(): Promise<ITimelineData>{\r\n        return new Promise((res, rej) => {\r\n            setTimeout(() => {\r\n                res(timelineData)\r\n            }, 1000)\r\n        })\r\n    }\r\n};\r\n\r\nexport default dataApi;","import {FETCH_SUCCESS, SystemActionTypes, IFetchSuccessAc} from \"./types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {RootState} from \"./store\";\r\nimport dataApi, {ITimelineData} from \"../api/dataApi\";\r\n\r\nconst initialState = {\r\n    timelineData: [] as ITimelineData\r\n};\r\n\r\ntype StateType = typeof initialState\r\n\r\nconst dataReducer = (state= initialState, action: SystemActionTypes): StateType => {\r\n   switch (action.type) {\r\n       case FETCH_SUCCESS:\r\n           return {\r\n               ...state,\r\n               timelineData: [...state.timelineData,  ...action.timelineData]\r\n           };\r\n       default :\r\n           return state\r\n   }\r\n};\r\n\r\nconst timelineDataSuccess = (timelineData: ITimelineData): IFetchSuccessAc => {\r\n    return {\r\n        type: FETCH_SUCCESS,\r\n        timelineData\r\n    }\r\n};\r\n\r\n// ---------------   ThunkCreator\r\ntype ThunkActionType = ThunkAction<Promise<void>, RootState, unknown, SystemActionTypes>\r\n\r\nexport const fetchTimelineData = (): ThunkActionType => async (dispatch) => {\r\n    try {\r\n        const data = await dataApi.fetchData();\r\n        dispatch(timelineDataSuccess(data));\r\n    } catch (error) {\r\n\r\n    }\r\n};\r\n\r\nexport default dataReducer;","import {ITimelineData} from \"../api/dataApi\";\r\n\r\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\r\n\r\nexport interface IFetchSuccessAc{\r\n    type: typeof FETCH_SUCCESS\r\n    timelineData: ITimelineData\r\n}\r\n\r\nexport interface IList {\r\n    list: Array<IField>\r\n}\r\n\r\nexport interface IField {\r\n    title: string\r\n    text?: string\r\n    header: boolean\r\n}\r\n\r\nexport type SystemActionTypes = IFetchSuccessAc","import React, {useEffect} from 'react';\nimport './App.css';\nimport Timeline from './components/Timeline';\nimport Header from \"./components/Header\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTimelineData} from \"./redux/dataReducer\";\n\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchTimelineData())\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Timeline/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import dataReducer from \"./dataReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    timelineData: dataReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState, any>));\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <React.StrictMode>\n                <App/>\n            </React.StrictMode>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}